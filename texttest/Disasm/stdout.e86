
start:
0x0       cmp SP, 0x100
0x4       jz 0x1     # cont

  hlt:
0x6       hlt       

 cont:
0x7       mov SP, 0x1000
0xa       mov AL, 0x2e
0xc       mov BX, 0x0
0xf       dec BX    
0x10      cmp BX, 0xffff
0x13      jnz -0xf   # hlt
0x15      call 0x151 # printchr
0x18      inc BX    
0x19      jnz -0x15  # hlt
0x1b      call 0x14b # printchr
0x1e      xor CX, CX
0x20      or BX, CX 
0x22      jnz -0x1e  # hlt
0x24      jc -0x20   # hlt
0x26      call 0x140 # printchr
0x29      mov CX, 0x8000
0x2c      cmp CX, BX
0x2e      jbe -0x2a  # hlt
0x30      call 0x136 # printchr
0x33      add BX, CX
0x35      jc -0x31   # hlt
0x37      call 0x12f # printchr
0x3a      add BX, BX
0x3c      adc CX, 0x0
0x3f      jns -0x3b  # hlt
0x41      jc -0x3d   # hlt
0x43      push CX   
0x44      and CX, 0x1
0x47      jz -0x43   # hlt
0x49      call 0x11d # printchr
0x4c      pop CX    
0x4d      stc       
0x4e      mov BX, 0x8000
0x51      sbb CX, BX
0x53      jnz -0x4f  # hlt
0x55      jc -0x51   # hlt
0x57      call 0x10f # printchr
0x5a      call 0x0   # calltest

calltest:
0x5d      pop BX    
0x5e      cmp BX, 0x5d
0x62      jnz -0x5e  # hlt
0x64      cmp SP, 0x1000
0x68      jnz -0x64  # hlt
0x6a      call 0xfc  # printchr
0x6d      mov BX, 0x72
0x70      push BX   
0x71      ret       

rettest:
0x72      cmp SP, 0x1000
0x76      jnz -0x72  # hlt
0x78      call 0xee  # printchr
0x7b      nop       
0x7c      nop       
0x7d      nop       
0x7e      jmp 0x1    # cont1
0x80      hlt       

cont1:
0x81      call 0xf8  # printnl
0x84      mov AX, 0x1c5
0x87      call 0xca  # print
0x8a      call 0xef  # printnl
0x8d      mov AL, 0x30

ascii_loop:
0x8f      call 0xd7  # printchr
0x92      inc AL    
0x94      cmp AL, 0x7f
0x96      jnz -0x9   # ascii_loop
0x98      mov AL, 0x23
0x9a      mov word [0x1d3], 0x190
0xa0      mov CL, 0x50

boxloop:
0xa2      call 0xc4  # printchr
0xa5      dec CL    
0xa7      jnz -0x7   # boxloop
0xa9      cmp word [0x1d3], 0x1e0
0xaf      jnz 0xa    # cont2
0xb1      mov CL, 0x50
0xb3      mov word [0x1d3], 0x780
0xb9      jmp -0x19  # boxloop

cont2:
0xbb      mov word [0x1d3], 0x1e0
0xc1      mov CL, 0x12

boxloop2:
0xc3      call 0xa3  # printchr
0xc6      call 0xa0  # printchr
0xc9      add word [0x1d3], 0x4c
0xce      call 0x98  # printchr
0xd1      call 0x95  # printchr
0xd4      dec CL    
0xd6      jnz -0x15  # boxloop2
0xd8      mov word [0x1d3], 0x234
0xde      xor AX, AX
0xe0      mov DX, 0x1
0xe3      mov CX, 0x11

fibloop:
0xe6      add DX, AX
0xe8      call 0x9f  # printnum
0xeb      push AX   
0xec      mov AX, 0x20
0xef      call 0x77  # printchr
0xf2      pop AX    
0xf3      xchg AX, DX
0xf4      dec CX    
0xf5      jnz -0x11  # fibloop
0xf7      mov word [0x1d3], 0x2d4
0xfd      mov CX, 0x0

squareloop:
0x100     mov AX, CX
0x102     call 0x3f  # calcsq
0x105     call 0x82  # printnum
0x108     mov AX, 0x20
0x10b     call 0x5b  # printchr
0x10e     inc CX    
0x10f     cmp CX, 0x14
0x112     jbe -0x14  # squareloop
0x114     mov word [0x1d3], 0x374
0x11a     mov BX, 0x2

primeloop:
0x11d     or byte [(BX) + 0x1d5], 0x0
0x122     jnz 0x19   # primecont
0x124     mov AX, BX
0x126     call 0x61  # printnum
0x129     mov AX, 0x20
0x12c     call 0x3a  # printchr
0x12f     mov DI, BX

primeloop_inner:
0x131     or byte [(DI) + 0x1d5], 0x1
0x136     add DI, BX
0x138     cmp DI, 0x65
0x13b     jbe -0xc   # primeloop_inner

primecont:
0x13d     inc BX    
0x13e     cmp BX, 0x64
0x141     jbe -0x26  # primeloop
0x143     hlt       

calcsq:
0x144     mov BX, AX
0x146     xor DX, DX
0x148     or BX, BX 

calcsqloop:
0x14a     jz 0x5     # calcsqfinish
0x14c     add DX, AX
0x14e     dec BX    
0x14f     jmp -0x7   # calcsqloop

calcsqfinish:
0x151     mov AX, DX
0x153     ret       

print:
0x154     push BX   
0x155     push DX   
0x156     mov BX, AX

printloop:
0x158     mov byte DL, [(BX)]
0x15a     inc BX    
0x15b     xchg DL, AL
0x15d     call 0x9   # printchr
0x160     xchg DL, AL
0x162     and DL, DL
0x164     jnz -0xe   # printloop
0x166     pop DX    
0x167     pop BX    
0x168     ret       

printchr:
0x169     push BX   
0x16a     push DI   
0x16b     mov BX, 0x8000
0x16e     mov word DI, [0x1d3]
0x172     mov byte [(BX) + (DI)], AL
0x174     inc DI    
0x175     mov word [0x1d3], DI
0x179     pop DI    
0x17a     pop BX    
0x17b     ret       

printnl:
0x17c     mov word DI, [0x1d3]

printnlloop:
0x180     sub DI, 0x50
0x183     jns -0x5   # printnlloop
0x185     sub word [0x1d3], DI
0x189     ret       

printnum:
0x18a     push BX   
0x18b     push AX   
0x18c     mov BL, 0x30
0x18e     cmp AX, 0x9
0x191     jbe 0x2a   # numcont_1digit
0x193     cmp AX, 0x63
0x196     jbe 0x13   # numloop_2digit

numloop_3digit:
0x198     sub AX, 0x64
0x19b     inc BL    
0x19d     cmp AX, 0x63
0x1a0     jnbe -0xa  # numloop_3digit
0x1a2     xchg AL, BL
0x1a4     call -0x3e # printchr
0x1a7     xchg AL, BL
0x1a9     mov BL, 0x30

numloop_2digit:
0x1ab     cmp AX, 0x9
0x1ae     jbe 0x6    # numcont_2digit
0x1b0     sub AX, 0xa
0x1b3     inc BX    
0x1b4     jmp -0xb   # numloop_2digit

numcont_2digit:
0x1b6     xchg BL, AL
0x1b8     call -0x52 # printchr
0x1bb     mov AL, BL

numcont_1digit:
0x1bd     add AL, 0x30
0x1bf     call -0x59 # printchr
0x1c2     pop AX    
0x1c3     pop BX    
0x1c4     ret       
0x1c5     dec AX    
0x1c6     UNKNOWN   
0x1c7     UNKNOWN   
0x1c8     UNKNOWN   
0x1c9     UNKNOWN   
0x1ca     UNKNOWN   
0x1cb     and byte [(BX) + 0x6f], DH
0x1ce     jc 0x6c    # 0x23c
0x1d0     UNKNOWN   
0x1d1     and word [(BX) + (SI)], AX
0x1d3     add byte [(BX) + (SI)], AL
